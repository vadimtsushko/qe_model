// Generated by Dogma Dart. DO NOT MODIFY!

library qe_model.src.convert.generic_dimension_properties_convert;

//---------------------------------------------------------------------
// Standard libraries
//---------------------------------------------------------------------

import 'dart:convert';

//---------------------------------------------------------------------
// Imports
//---------------------------------------------------------------------

import 'package:dogma_convert/convert.dart';
import 'package:qe_model/models.dart';
import 'nx_info_convert.dart';
import 'nx_library_dimension_def_convert.dart';

//---------------------------------------------------------------------
// Library contents
//---------------------------------------------------------------------

/// A [ModelDecoder] for [GenericDimensionProperties].
class GenericDimensionPropertiesDecoder
    extends Converter<Map, GenericDimensionProperties>
    implements ModelDecoder<GenericDimensionProperties> {
  final Converter<Map, NxInfo> _nxInfoDecoder;
  final Converter<Map, NxLibraryDimensionDef> _nxLibraryDimensionDefDecoder;
  GenericDimensionPropertiesDecoder()
      : _nxInfoDecoder = new NxInfoDecoder(),
        _nxLibraryDimensionDefDecoder = new NxLibraryDimensionDefDecoder();
  GenericDimensionPropertiesDecoder.using(
      this._nxInfoDecoder, this._nxLibraryDimensionDefDecoder);
  @override
  GenericDimensionProperties create() => new GenericDimensionProperties();
  @override
  GenericDimensionProperties convert(Map input,
      [GenericDimensionProperties model]) {
    model ??= create();

    var qInfo = input['qInfo'];
    if (qInfo != null) {
      model.qInfo = _nxInfoDecoder.convert(qInfo);
    }
    model.qDim = _nxLibraryDimensionDefDecoder.convert(input['qDim']);

    return model;
  }
}

/// A [ModelEncoder] for [GenericDimensionProperties].
class GenericDimensionPropertiesEncoder
    extends Converter<GenericDimensionProperties, Map>
    implements ModelEncoder<GenericDimensionProperties> {
  final Converter<NxInfo, Map> _nxInfoEncoder;
  final Converter<NxLibraryDimensionDef, Map> _nxLibraryDimensionDefEncoder;
  GenericDimensionPropertiesEncoder()
      : _nxInfoEncoder = new NxInfoEncoder(),
        _nxLibraryDimensionDefEncoder = new NxLibraryDimensionDefEncoder();
  GenericDimensionPropertiesEncoder.using(
      this._nxInfoEncoder, this._nxLibraryDimensionDefEncoder);
  @override
  Map convert(GenericDimensionProperties input) {
    var model = {};

    var qInfo = input.qInfo;
    if (qInfo != null) {
      model['qInfo'] = _nxInfoEncoder.convert(qInfo);
    }
    model['qDim'] = _nxLibraryDimensionDefEncoder.convert(input.qDim);

    return model;
  }
}
